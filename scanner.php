<?php
/**
 * Laravel File Explorer Script
 * –°–∫–∞–Ω–∏—Ä—É–µ—Ç –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Laravel-–ø—Ä–æ–µ–∫—Ç–∞
 */

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Laravel
function findLaravelRoot($startDir)
{
    $currentDir = $startDir;
    while (!is_file($currentDir . '/artisan')) {
        $parentDir = dirname($currentDir);
        if ($parentDir === $currentDir) {
            return false;
        }
        $currentDir = $parentDir;
    }
    return $currentDir;
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é Laravel
$rootDir = findLaravelRoot(getcwd());
if (!$rootDir) {
    die("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é Laravel (–∏—â–µ—Ç—Å—è —Ñ–∞–π–ª artisan).\n");
}

// –û–ø—Ü–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ –í–´–ö–õ–Æ–ß–ï–ù–û)
$scanOptions = [
    'controllers' => false,
    'models' => false,
    'admin' => false,
    'config' => false,
    'routes' => false,
    'views' => false,
    'migrations' => false,
    'public' => false,
    'bootstrap' => false,
];

// –û–±—Ä–∞–±–æ—Ç–∫–∞ GET-–ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –æ–ø—Ü–∏–π
if (PHP_SAPI !== 'cli') {
    foreach ($scanOptions as $option => $default) {
        if (isset($_GET[$option])) {
            $scanOptions[$option] = ($_GET[$option] === '1' || $_GET[$option] === 'true');
        }
    }
}

// CLI –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if (PHP_SAPI === 'cli' && $argc > 1) {
    for ($i = 1; $i < $argc; $i++) {
        $arg = $argv[$i];
        if (strpos($arg, '--') === 0) {
            $option = substr($arg, 2);
            if (array_key_exists($option, $scanOptions)) {
                $scanOptions[$option] = true;
            }
        }
    }
}

// –ï—Å–ª–∏ –≤ CLI –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏ –≤ –≤–µ–±–µ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
$hasSelectedOptions = !empty(array_filter($scanOptions));
if (!$hasSelectedOptions && PHP_SAPI !== 'cli') {
    renderOptionsForm($scanOptions, $rootDir);
    exit;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ñ–æ—Ä–º—ã —Å –æ–ø—Ü–∏—è–º–∏
function renderOptionsForm($scanOptions, $rootDir)
{
    echo "<!DOCTYPE html>
<html lang='ru'>
<head>
    <meta charset='UTF-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>Laravel File Explorer - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; background: #f5f5f5; }
        .container { max-width: 800px; margin: 0 auto; background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        h1 { color: #333; border-bottom: 2px solid #e91e63; padding-bottom: 10px; }
        .options-grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); gap: 15px; margin: 20px 0; }
        .option-item { display: flex; align-items: center; }
        .option-item input[type='checkbox'] { margin-right: 10px; transform: scale(1.2); }
        .option-item label { font-size: 16px; cursor: pointer; }
        .scan-btn { background: #e91e63; color: white; border: none; padding: 12px 30px; font-size: 16px; border-radius: 5px; cursor: pointer; margin-top: 20px; }
        .scan-btn:hover { background: #d81b60; }
        .current-dir { background: #e7f3ff; padding: 10px; border-radius: 5px; margin: 15px 0; }
        .warning { background: #fff3cd; padding: 10px; border-radius: 5px; margin: 15px 0; border: 1px solid #ffeaa7; }
    </style>
</head>
<body>
    <div class='container'>
        <h1>üîç Laravel File Explorer</h1>
        
        <div class='current-dir'>
            <strong>üì¶ –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:</strong> $rootDir
        </div>
        
        <div class='warning'>
            <strong>‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:</strong> –ë—É–¥—É—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è –¢–û–õ–¨–ö–û –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ - –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ —ç—Ç–∞ —Ñ–æ—Ä–º–∞.
        </div>
        
        <form method='GET'>
            <h3>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</h3>
            <div class='options-grid'>
                <div class='option-item'>
                    <input type='checkbox' id='controllers' name='controllers' value='1' " . ($scanOptions['controllers'] ? 'checked' : '') . ">
                    <label for='controllers'>üéÆ –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã (app/Http/Controllers)</label>
                </div>
                <div class='option-item'>
                    <input type='checkbox' id='models' name='models' value='1' " . ($scanOptions['models'] ? 'checked' : '') . ">
                    <label for='models'>üìä –ú–æ–¥–µ–ª–∏ (app/Models)</label>
                </div>
                <div class='option-item'>
                    <input type='checkbox' id='admin' name='admin' value='1' " . ($scanOptions['admin'] ? 'checked' : '') . ">
                    <label for='admin'>‚öôÔ∏è –ê–¥–º–∏–Ω–∫–∞ (app/Admin, app/Http/Controllers/Admin)</label>
                </div>
                <div class='option-item'>
                    <input type='checkbox' id='config' name='config' value='1' " . ($scanOptions['config'] ? 'checked' : '') . ">
                    <label for='config'>üîß –ö–æ–Ω—Ñ–∏–≥–∏ (config/)</label>
                </div>
                <div class='option-item'>
                    <input type='checkbox' id='routes' name='routes' value='1' " . ($scanOptions['routes'] ? 'checked' : '') . ">
                    <label for='routes'>üõ£Ô∏è –†–æ—É—Ç—ã (routes/)</label>
                </div>
                <div class='option-item'>
                    <input type='checkbox' id='views' name='views' value='1' " . ($scanOptions['views'] ? 'checked' : '') . ">
                    <label for='views'>üëÅÔ∏è –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è (resources/views)</label>
                </div>
                <div class='option-item'>
                    <input type='checkbox' id='migrations' name='migrations' value='1' " . ($scanOptions['migrations'] ? 'checked' : '') . ">
                    <label for='migrations'>üóÉÔ∏è –ú–∏–≥—Ä–∞—Ü–∏–∏ (database/migrations)</label>
                </div>
                <div class='option-item'>
                    <input type='checkbox' id='public' name='public' value='1' " . ($scanOptions['public'] ? 'checked' : '') . ">
                    <label for='public'>üìÅ Public (public/)</label>
                </div>
                <div class='option-item'>
                    <input type='checkbox' id='bootstrap' name='bootstrap' value='1' " . ($scanOptions['bootstrap'] ? 'checked' : '') . ">
                    <label for='bootstrap'>üöÄ Bootstrap (bootstrap/)</label>
                </div>
            </div>
            <button type='submit' class='scan-btn'>üîç –ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</button>
        </form>
    </div>
</body>
</html>";
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –í–´–ë–†–ê–ù–ù–´–• –æ–ø—Ü–∏–π
$scanPaths = [];

if ($scanOptions['controllers']) {
    $scanPaths[] = 'app/Http/Controllers';
}

if ($scanOptions['models']) {
    $scanPaths[] = 'app/Models';
}

if ($scanOptions['admin']) {
    // –ò—â–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ —á–∞—Å—Ç–∏
    $adminPaths = ['app/Admin', 'app/Http/Controllers/Admin', 'resources/views/admin'];
    foreach ($adminPaths as $adminPath) {
        if (is_dir($rootDir . '/' . $adminPath)) {
            $scanPaths[] = $adminPath;
        }
    }
}

if ($scanOptions['config']) {
    $scanPaths[] = 'config';
}

if ($scanOptions['routes']) {
    $scanPaths[] = 'routes';
}

if ($scanOptions['views']) {
    $scanPaths[] = 'resources/views';
}

if ($scanOptions['migrations']) {
    $scanPaths[] = 'database/migrations';
}

if ($scanOptions['public']) {
    $scanPaths[] = 'public';
}

if ($scanOptions['bootstrap']) {
    $scanPaths[] = 'bootstrap';
}

// –ò—Å–∫–ª—é—á–∞–µ–º—ã–µ —Ñ–∞–π–ª—ã/–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ (—Ç–æ–ª—å–∫–æ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ, –Ω–µ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –∫–æ–¥—É –ø—Ä–æ–µ–∫—Ç–∞)
$excludePatterns = [
    '/\.git/',
    '/vendor/',
    '/node_modules/',
    '/storage\/framework/',
    '/storage\/logs/',
    '/storage\/cache/',
    '/\.env\.example/',
    '/composer\.lock/',
    '/package-lock\.json/',
    '/yarn\.lock/',
];

// –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
$allFiles = [];
$treeStructure = [];

// –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏
if ($hasSelectedOptions) {
    echo "üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ Laravel-–ø—Ä–æ–µ–∫—Ç–∞...\n\n";
    echo "üì¶ –ö–æ—Ä–Ω–µ–≤–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $rootDir\n\n";

    // –í—ã–≤–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –æ–ø—Ü–∏–∏
    echo "‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:\n";
    $selectedCount = 0;
    foreach ($scanOptions as $option => $enabled) {
        if ($enabled) {
            echo "  ‚úì $option\n";
            $selectedCount++;
        }
    }
    echo "\n";

    if ($selectedCount === 0) {
        echo "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n";
        if (PHP_SAPI !== 'cli') {
            echo "<br><a href='?'>‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</a>";
        }
        exit;
    }

    // –°–∫–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø—É—Ç–∏
    foreach ($scanPaths as $path) {
        $fullPath = $rootDir . '/' . $path;
        if (is_file($fullPath)) {
            if (!in_array($path, $allFiles)) {
                $allFiles[] = $path;
                addFileToTree($treeStructure, $path);
            }
        } elseif (is_dir($fullPath)) {
            scanDirectory($fullPath, $path, $allFiles, $treeStructure, $excludePatterns, $rootDir);
        }
    }

    // –§—É–Ω–∫—Ü–∏—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    function scanDirectory($absDir, $relDir, &$files, &$tree, $excludePatterns, $rootDir)
    {
        $items = scandir($absDir);
        foreach ($items as $item) {
            if ($item === '.' || $item === '..') continue;

            $absPath = $absDir . '/' . $item;
            $relPath = ($relDir === '.') ? $item : $relDir . '/' . $item;

            // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ
            $skip = false;
            foreach ($excludePatterns as $pattern) {
                if (preg_match($pattern, $absPath) || preg_match($pattern, $relPath)) {
                    $skip = true;
                    break;
                }
            }
            if ($skip) continue;

            if (is_file($absPath)) {
                if (!in_array($relPath, $files)) {
                    $files[] = $relPath;
                    addFileToTree($tree, $relPath);
                }
            } elseif (is_dir($absPath)) {
                scanDirectory($absPath, $relPath, $files, $tree, $excludePatterns, $rootDir);
            }
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–µ—Ä–µ–≤–∞
    function addFileToTree(&$tree, $filePath)
    {
        $parts = explode('/', $filePath);
        $current = &$tree;
        foreach ($parts as $part) {
            if (!isset($current[$part])) {
                $current[$part] = [];
            }
            $current = &$current[$part];
        }
    }

    // –í—ã–≤–æ–¥ –¥–µ—Ä–µ–≤–∞
    function printTree($tree, $prefix = '')
    {
        $keys = array_keys($tree);
        $count = count($keys);
        for ($i = 0; $i < $count; $i++) {
            $key = $keys[$i];
            $isLast = ($i === $count - 1);
            $connector = $isLast ? '‚îî‚îÄ‚îÄ ' : '‚îú‚îÄ‚îÄ ';
            echo $prefix . $connector . $key . "\n";

            if (!empty($tree[$key])) {
                $newPrefix = $prefix . ($isLast ? '    ' : '‚îÇ   ');
                printTree($tree[$key], $newPrefix);
            }
        }
    }

    // –í—ã–≤–æ–¥–∏–º –∏–µ—Ä–∞—Ä—Ö–∏—é
    if (!empty($treeStructure)) {
        echo "üå≥ –ò–µ—Ä–∞—Ä—Ö–∏—è —Ñ–∞–π–ª–æ–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤:\n";
        printTree($treeStructure);
        echo "\n" . str_repeat("‚îÄ", 80) . "\n\n";
    } else {
        echo "‚ùå –í –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤.\n";
        echo str_repeat("‚îÄ", 80) . "\n\n";
    }

    // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤
    if (!empty($allFiles)) {
        echo "üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö:\n";
        foreach ($allFiles as $index => $file) {
            echo sprintf("%03d) %s\n", $index + 1, $file);
        }
        echo "\n" . str_repeat("‚îÄ", 80) . "\n\n";

        // –í—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤
        echo "üìÑ –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–æ–≤:\n\n";

        foreach ($allFiles as $file) {
            echo str_repeat("‚ïê", 80) . "\n";
            echo "üìÇ –§–∞–π–ª: " . $file . "\n";
            echo str_repeat("‚ïê", 80) . "\n";

            $absPath = $rootDir . '/' . $file;
            if (!file_exists($absPath)) {
                echo "‚ùå –§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è.\n\n";
                continue;
            }

            $content = file_get_contents($absPath);
            if ($content === false) {
                echo "‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞.\n\n";
                continue;
            }

            if (PHP_SAPI === 'cli') {
                echo $content . "\n\n";
            } else {
                if (pathinfo($file, PATHINFO_EXTENSION) === 'php') {
                    highlight_string($content);
                } else {
                    echo "<pre>" . htmlspecialchars($content) . "</pre>";
                }
                echo "<br><br>";
            }
        }

        echo "‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n";
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if (PHP_SAPI !== 'cli') {
            echo "<br><br><a href='?'>‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</a>";
        }
    } else {
        echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö.\n";
        if (PHP_SAPI !== 'cli') {
            echo "<br><a href='?'>‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤</a>";
        }
    }
} else {
    // –ï—Å–ª–∏ –≤ CLI –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if (PHP_SAPI === 'cli') {
        echo "‚ùå –ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n";
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:\n";
        echo "  php script.php --controllers --models --views\n\n";
        echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏:\n";
        foreach (array_keys($scanOptions) as $option) {
            echo "  --$option\n";
        }
    }
}
?>
